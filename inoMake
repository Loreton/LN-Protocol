#!/bin/bash


# ########################################################################
# # Creazione dei LINK logici per inserire le directory con le librerie.
# ########################################################################
function createLibraryLink {

    for dirName in $dirNames; do
        sourceDir="${PROJECT_LIB_DIR}/${dirName}"
        linkDir="${ARDUINO_LIB_DIR}/${dirName}"

         # ---- create new link
        if [ -d "$sourceDir" ]; then
            CMD="sudo ln -s ${sourceDir} ${linkDir}"
            # echo $CMD
            eval $CMD;rCode=$?
            [[ ! "$rCode" == "0" ]] && echo "E R R O R    on $CMD" && exit $rCode
        else
            echo "skipping      .....  $dirName"
        fi
    done

    # ls -la "$ARDUINO_LIB_DIR"

}

function clearLibraryLink {
    echo "removing LINKs to my libraries"
    for dirName in $dirNames; do
        linkDir="${ARDUINO_LIB_DIR}/${dirName}"
        if [ -L "$linkDir" ]; then
            CMD="sudo rm -f ${linkDir}";
            # echo $CMD;
            eval $CMD;rCode=$?
        fi
    done

    # ls -la "$ARDUINO_LIB_DIR"
}

# ########################################################################
# # M A I N
# ########################################################################
    thisDir="$(dirname  "$(test -L "$0" && readlink "$0" || echo "$0")")"     # risolve anche eventuali LINK presenti sullo script
    thisDir=$(cd $(dirname "$thisDir"); pwd -P)/$(basename "$thisDir")        # GET AbsolutePath
    baseDir=${thisDir%/.*}
    echo
    echo "      this script is: $0"
    echo

    ARDUINO_LIB_DIR='/usr/share/arduino/libraries'
    PROJECT_LIB_DIR="$baseDir/LnLibraries"


    device=/dev/ttyUSBx
    device=$2
    action=$1


    module='uno'
    module='nano328'

    if [[ ! "$action" =~ [bus] ]]; then
        echo "      immettere uno o pi√π dei seguenti parametri:"
        echo "          b = build"
        echo "          u = upload"
        echo "          s = serial read"
        echo
        exit
    fi



    if [[ ! -d $ARDUINO_LIB_DIR ]]; then
        echo
        echo "  ERROR directory: $ARDUINO_LIB_DIR doesn't exists."
        echo
        exit 1
    else
        echo "  Arduino directory: $ARDUINO_LIB_DIR"
    fi

    if [[ ! -d $PROJECT_LIB_DIR ]]; then
        echo
        echo "  ERROR directory: $PROJECT_LIB_DIR doesn't exists."
        echo
        exit 1
    else
        echo "  Project directory: $PROJECT_LIB_DIR"
        echo
    fi

    dirNames='RCSwitch LnFunctions RS485_protocol VirtualWire115 MAX7219 Adafruit-ST7735-Library Adafruit_GFX'
    if [[ "$action" =~ "c" ]]; then
        echo "Cleaning project ....: $PWD"
        CMD="ino clean"; echo $CMD; eval $CMD;rCode=$?
        [[ "$rCode" != "0" ]] && echo $rCode && exit
    fi
    if [[ "$action" =~ "b" ]]; then
        clearLibraryLink
        createLibraryLink
        echo
        echo "Building .... from dir: $PWD"
        CMD="ino build -v -m $module"; echo $CMD; eval $CMD;rCode=$?
        # clearLibraryLink
        [[ "$rCode" != "0" ]] && echo $rCode && exit
    fi

    if [[ "$action" =~ "u" ]]; then
        [[ "$device" == "" ]] && echo "Enter USB port: ttyUSB0, ttyUSB1, ...." && exit
        [[ ! -c "$device" ]] && echo "$device is NOT a character device" && exit
        echo "UpLoading ...."
        CMD="ino upload -p $device -m $module"; echo $CMD; eval $CMD;rCode=$?
        [[ "$rCode" != "0" ]] && echo $rCode && exit
    fi


    if [[ "$action" =~ "s" ]]; then
        [[ "$device" == "" ]] && echo "Enter USB port: ttyUSB0, ttyUSB1, ...." && exit
        [[ ! -c "$device" ]] && echo "$device is NOT a character device" && exit
    echo
        echo "Reading serial .... Press Ctrl+a Ctrl+x to exit."
        # echo "Press Ctrl+a Ctrl+x to exit."
    echo
        CMD="ino serial -p $device"; echo $CMD; eval $CMD;rCode=$?
        [[ "$rCode" != "0" ]] && echo $rCode && exit
    fi
